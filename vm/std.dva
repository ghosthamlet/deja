labda $endfor
$startloop
dup
jmpz $endloop
push_word 2
jmp $startloop
$endloop
drop
return
$endfor
set_global 3
labda $endwhile
set_local 0
set_local 1
$startloop2
push_word 0
jmpz $endloop2
push_word 1
jmp $startloop2
$endloop2
return
$endwhile
set_global 4
labda $endcompose
set_local 0
set_local 1
labda $endcomposed
push_word 1
push_word 0
$endcomposed
return
$endcompose
set_global 5
labda $endarr
$startarr
new_dict
$startloop3
rot
dup
push_literal 7
push_word 9
jmpz $endloop3
push_word 8
push_word 8
set_dict
swap
push_word 10
swap
jmp $startloop3
$endloop3
drop
swap
drop
return
$endarr
set_global 6
labda $endover3
set_local 0
set_local 1
set_local 7
get 7
get 1
get 0
get 7
return
$endover3
set_global 8
labda $endarr0
push_integer 0
jmp $startarr
$endarr0
set_global 11
labda $endarr1
push_integer 1
jmp $startarr
$endarr1
set_global 12
new_dict
set_local 0
labda $endimport
set_local 1
push_word 1
push_word 0
has_dict
push_word 13
jmpz $already
push_word 1
push_word 14
push_word 1
push_word 0
set_dict
$already
push_word 1
push_word 0
get_dict
push_word 1
push_word 15
return
$endimport
set_global 16
return
...
ia
ib
icall
ifor:
iwhile
i$
iarr(
i)
iover-3
i!=
i++
iarr0(
iarr1(
inot
iuse
isetglobal
iimport
